/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: aletheia.proto */

#ifndef PROTOBUF_C_aletheia_2eproto__INCLUDED
#define PROTOBUF_C_aletheia_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _PackageDevice2Hub PackageDevice2Hub;
typedef struct _PackageHub2Device PackageHub2Device;
typedef struct _HubCommands HubCommands;
typedef struct _LocalData LocalData;
typedef struct _ActionMatrix ActionMatrix;
typedef struct _DeviceConfig DeviceConfig;
typedef struct _AlgorithmConfig AlgorithmConfig;
typedef struct _DeviceStatus DeviceStatus;
typedef struct _GenericEvent GenericEvent;
typedef struct _EventArray EventArray;
typedef struct _EventArray__EventArrayEntry EventArray__EventArrayEntry;
typedef struct _Event0x01 Event0x01;
typedef struct _Event0x02 Event0x02;
typedef struct _Event0x04 Event0x04;
typedef struct _Event0x05 Event0x05;
typedef struct _Event0x06 Event0x06;
typedef struct _Event0x07 Event0x07;
typedef struct _Event0x09 Event0x09;
typedef struct _Event0x0B Event0x0B;
typedef struct _Event0x0C Event0x0C;
typedef struct _Event0x0D Event0x0D;
typedef struct _Event0x0F Event0x0F;
typedef struct _Event0x10 Event0x10;
typedef struct _Event0x11 Event0x11;
typedef struct _Event0x12 Event0x12;
typedef struct _Event0x13 Event0x13;
typedef struct _Event0x17 Event0x17;
typedef struct _Event0x18 Event0x18;
typedef struct _Event0x19 Event0x19;
typedef struct _Event0x1A Event0x1A;
typedef struct _Event0x1B Event0x1B;
typedef struct _Event0x1C Event0x1C;
typedef struct _Event0xFF Event0xFF;
typedef struct _Event0x08 Event0x08;
typedef struct _HubNotifications HubNotifications;
typedef struct _UsageUpdate UsageUpdate;
typedef struct _HubUpdate HubUpdate;
typedef struct _DataUpdate DataUpdate;
typedef struct _RequestHub RequestHub;


/* --- enums --- */


/* --- messages --- */

struct  _PackageDevice2Hub
{
  ProtobufCMessage base;
  protobuf_c_boolean is_get_request;
  ProtobufCBinaryData confirm_hubupdate_uuid;
  ProtobufCBinaryData confirm_dataupdate_uuid;
  protobuf_c_boolean contains_usageupdate;
  UsageUpdate *usage_update_message;
  RequestHub *request_hub_message;
};
#define PACKAGE_DEVICE2_HUB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&package_device2_hub__descriptor) \
    , 0, {0,NULL}, {0,NULL}, 0, NULL, NULL }


struct  _PackageHub2Device
{
  ProtobufCMessage base;
  ProtobufCBinaryData confirm_usageupdate_uuid;
  protobuf_c_boolean contains_hubupdate;
  protobuf_c_boolean contains_dataupdate;
  HubUpdate *hub_update_message;
  DataUpdate *data_update_message;
};
#define PACKAGE_HUB2_DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&package_hub2_device__descriptor) \
    , {0,NULL}, 0, 0, NULL, NULL }


struct  _HubCommands
{
  ProtobufCMessage base;
  protobuf_c_boolean cmd_data_update;
  protobuf_c_boolean cmd_firmware_update;
  protobuf_c_boolean cmd_reboot;
  protobuf_c_boolean cmd_calibrate;
};
#define HUB_COMMANDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hub_commands__descriptor) \
    , 0, 0, 0, 0 }


struct  _LocalData
{
  ProtobufCMessage base;
  protobuf_c_boolean contains_rfids;
  protobuf_c_boolean contains_rooms;
  protobuf_c_boolean contains_mops;
  ProtobufCBinaryData rfids;
  ProtobufCBinaryData rooms;
  ProtobufCBinaryData mops;
};
#define LOCAL_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&local_data__descriptor) \
    , 0, 0, 0, {0,NULL}, {0,NULL}, {0,NULL} }


struct  _ActionMatrix
{
  ProtobufCMessage base;
  ProtobufCBinaryData action_matrix;
};
#define ACTION_MATRIX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&action_matrix__descriptor) \
    , {0,NULL} }


struct  _DeviceConfig
{
  ProtobufCMessage base;
  uint32_t imu_interval;
  uint32_t rfid_interval_mopping_state;
  uint32_t rfid_interval_moving_state;
  uint32_t rfid_interval_mopchange_state;
  uint32_t rfid_scan_after_mopchange;
  uint32_t rfid_output_power;
  uint32_t rfid_frequency;
  uint32_t coap_block_size;
};
#define DEVICE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_config__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _AlgorithmConfig
{
  ProtobufCMessage base;
  float acc_noise_thr;
  float gyr_noise_thr;
  float mag_noise_thr;
  uint32_t frame_handle_angle_thr;
  uint32_t floor_handle_angle_mopping_thr_min;
  uint32_t floor_handle_angle_mopping_thr_max;
  uint32_t floor_handle_angle_mopchange_thr;
  float min_mopchange_duration;
  float min_mopframeflip_duration;
  float angle_smooth_factor;
  float gyr_smooth_factor;
  float min_mopcycle_duration;
  float max_mopcycle_duration;
  float mop_overlap;
  uint32_t mopcycle_sequence_thr;
  uint32_t nf;
  float peakfollower_update_delay;
  uint32_t moprfid_detection_thr;
  float mopping_coverage_per_mop_thr;
};
#define ALGORITHM_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&algorithm_config__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _DeviceStatus
{
  ProtobufCMessage base;
  int64_t status_timestamp;
  ProtobufCBinaryData device_imei;
  uint32_t site_id;
  uint32_t room_id;
  ProtobufCBinaryData location_epc;
  uint32_t mop_id;
  uint32_t frame_side;
  uint32_t pattern_id;
  uint32_t battery_charge;
  uint32_t is_charging;
  uint32_t battery_lifetime;
  int32_t env_temp;
  uint32_t cell_signal;
  ProtobufCBinaryData firmware;
};
#define DEVICE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_status__descriptor) \
    , 0, {0,NULL}, 0, 0, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL} }


typedef enum {
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT__NOT_SET = 0,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X01 = 1,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X02 = 2,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X04 = 3,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X05 = 4,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X06 = 5,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X07 = 6,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X09 = 7,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X0_B = 8,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X0_C = 9,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X0_D = 10,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X0_F = 11,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X10 = 12,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X11 = 13,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X12 = 14,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X13 = 15,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X17 = 16,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X18 = 17,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X19 = 18,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X1_A = 19,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X1_B = 20,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X1_C = 21,
  GENERIC_EVENT__ONE_OF_GENERIC_EVENT_FIELD_EVENT0X_FF = 22
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GENERIC_EVENT__ONE_OF_GENERIC_EVENT)
} GenericEvent__OneOfGenericEventCase;

struct  _GenericEvent
{
  ProtobufCMessage base;
  GenericEvent__OneOfGenericEventCase one_of_generic_event_case;
  union {
    Event0x01 *field_event0x01;
    Event0x02 *field_event0x02;
    Event0x04 *field_event0x04;
    Event0x05 *field_event0x05;
    Event0x06 *field_event0x06;
    Event0x07 *field_event0x07;
    Event0x09 *field_event0x09;
    Event0x0B *field_event0x0b;
    Event0x0C *field_event0x0c;
    Event0x0D *field_event0x0d;
    Event0x0F *field_event0x0f;
    Event0x10 *field_event0x10;
    Event0x11 *field_event0x11;
    Event0x12 *field_event0x12;
    Event0x13 *field_event0x13;
    Event0x17 *field_event0x17;
    Event0x18 *field_event0x18;
    Event0x19 *field_event0x19;
    Event0x1A *field_event0x1a;
    Event0x1B *field_event0x1b;
    Event0x1C *field_event0x1c;
    Event0xFF *field_event0xff;
  };
};
#define GENERIC_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&generic_event__descriptor) \
    , GENERIC_EVENT__ONE_OF_GENERIC_EVENT__NOT_SET, {0} }


struct  _EventArray__EventArrayEntry
{
  ProtobufCMessage base;
  uint32_t key;
  GenericEvent *value;
};
#define EVENT_ARRAY__EVENT_ARRAY_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_array__event_array_entry__descriptor) \
    , 0, NULL }


struct  _EventArray
{
  ProtobufCMessage base;
  size_t n_event_array;
  EventArray__EventArrayEntry **event_array;
};
#define EVENT_ARRAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event_array__descriptor) \
    , 0,NULL }


struct  _Event0x01
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  int64_t interval_start;
  int64_t interval_end;
  float pattern_idle;
  float pattern_moving;
  float pattern_mopping;
};
#define EVENT0X01__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x01__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _Event0x02
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t mop_id;
};
#define EVENT0X02__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x02__descriptor) \
    , 0, 0, 0 }


struct  _Event0x04
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t room_id;
};
#define EVENT0X04__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x04__descriptor) \
    , 0, 0, 0 }


struct  _Event0x05
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t room_id;
  uint32_t mop_id;
};
#define EVENT0X05__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x05__descriptor) \
    , 0, 0, 0, 0 }


struct  _Event0x06
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t room_id;
  uint32_t mop_id;
};
#define EVENT0X06__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x06__descriptor) \
    , 0, 0, 0, 0 }


struct  _Event0x07
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  ProtobufCBinaryData location_epc;
};
#define EVENT0X07__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x07__descriptor) \
    , 0, 0, {0,NULL} }


struct  _Event0x09
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
};
#define EVENT0X09__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x09__descriptor) \
    , 0, 0 }


struct  _Event0x0B
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
};
#define EVENT0X0_B__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x0_b__descriptor) \
    , 0, 0 }


struct  _Event0x0C
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
};
#define EVENT0X0_C__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x0_c__descriptor) \
    , 0, 0 }


struct  _Event0x0D
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
};
#define EVENT0X0_D__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x0_d__descriptor) \
    , 0, 0 }


struct  _Event0x0F
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
};
#define EVENT0X0_F__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x0_f__descriptor) \
    , 0, 0 }


struct  _Event0x10
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
};
#define EVENT0X10__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x10__descriptor) \
    , 0, 0 }


struct  _Event0x11
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
};
#define EVENT0X11__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x11__descriptor) \
    , 0, 0 }


struct  _Event0x12
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
};
#define EVENT0X12__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x12__descriptor) \
    , 0, 0 }


struct  _Event0x13
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
};
#define EVENT0X13__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x13__descriptor) \
    , 0, 0 }


struct  _Event0x17
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t schock_acc;
};
#define EVENT0X17__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x17__descriptor) \
    , 0, 0, 0 }


struct  _Event0x18
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t frame_side;
};
#define EVENT0X18__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x18__descriptor) \
    , 0, 0, 0 }


struct  _Event0x19
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t room_id;
  uint32_t mop_id;
};
#define EVENT0X19__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x19__descriptor) \
    , 0, 0, 0, 0 }


struct  _Event0x1A
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t room_id;
  uint32_t mop_id;
};
#define EVENT0X1_A__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x1_a__descriptor) \
    , 0, 0, 0, 0 }


struct  _Event0x1B
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
};
#define EVENT0X1_B__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x1_b__descriptor) \
    , 0, 0 }


struct  _Event0x1C
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t mop_id;
  float sqm_side_0;
  float sqm_side_1;
};
#define EVENT0X1_C__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x1_c__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _Event0xFF
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t msg_id;
  ProtobufCBinaryData msg;
};
#define EVENT0X_FF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x_ff__descriptor) \
    , 0, 0, 0, {0,NULL} }


struct  _Event0x08
{
  ProtobufCMessage base;
  uint32_t event_id;
  int64_t event_timestamp;
  uint32_t notification_id;
  uint32_t notification_ttl;
  uint32_t notification_pattern_id;
  uint32_t notification_led_power;
  uint32_t notification_sound_power;
};
#define EVENT0X08__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event0x08__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  _HubNotifications
{
  ProtobufCMessage base;
  size_t n_notification_message;
  Event0x08 **notification_message;
};
#define HUB_NOTIFICATIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hub_notifications__descriptor) \
    , 0,NULL }


struct  _UsageUpdate
{
  ProtobufCMessage base;
  ProtobufCBinaryData usageupdate_uuid;
  DeviceStatus *device_status;
  EventArray *device_events;
};
#define USAGE_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&usage_update__descriptor) \
    , {0,NULL}, NULL, NULL }


struct  _HubUpdate
{
  ProtobufCMessage base;
  ProtobufCBinaryData hubupdate_uuid;
  protobuf_c_boolean contains_hubnotifications;
  HubCommands *hub_commands;
  HubNotifications *hub_notifications;
};
#define HUB_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&hub_update__descriptor) \
    , {0,NULL}, 0, NULL, NULL }


struct  _DataUpdate
{
  ProtobufCMessage base;
  ProtobufCBinaryData dataupdate_uuid;
  protobuf_c_boolean contains_localdata;
  protobuf_c_boolean contains_actionmatrix;
  protobuf_c_boolean contains_deviceconfig;
  protobuf_c_boolean contains_algorithmconfig;
  LocalData *local_data;
  ActionMatrix *action_matrix;
  DeviceConfig *device_config;
  AlgorithmConfig *algorithm_config;
};
#define DATA_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_update__descriptor) \
    , {0,NULL}, 0, 0, 0, 0, NULL, NULL, NULL, NULL }


struct  _RequestHub
{
  ProtobufCMessage base;
  protobuf_c_boolean req_data_update;
};
#define REQUEST_HUB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request_hub__descriptor) \
    , 0 }


/* PackageDevice2Hub methods */
void   package_device2_hub__init
                     (PackageDevice2Hub         *message);
size_t package_device2_hub__get_packed_size
                     (const PackageDevice2Hub   *message);
size_t package_device2_hub__pack
                     (const PackageDevice2Hub   *message,
                      uint8_t             *out);
size_t package_device2_hub__pack_to_buffer
                     (const PackageDevice2Hub   *message,
                      ProtobufCBuffer     *buffer);
PackageDevice2Hub *
       package_device2_hub__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   package_device2_hub__free_unpacked
                     (PackageDevice2Hub *message,
                      ProtobufCAllocator *allocator);
/* PackageHub2Device methods */
void   package_hub2_device__init
                     (PackageHub2Device         *message);
size_t package_hub2_device__get_packed_size
                     (const PackageHub2Device   *message);
size_t package_hub2_device__pack
                     (const PackageHub2Device   *message,
                      uint8_t             *out);
size_t package_hub2_device__pack_to_buffer
                     (const PackageHub2Device   *message,
                      ProtobufCBuffer     *buffer);
PackageHub2Device *
       package_hub2_device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   package_hub2_device__free_unpacked
                     (PackageHub2Device *message,
                      ProtobufCAllocator *allocator);
/* HubCommands methods */
void   hub_commands__init
                     (HubCommands         *message);
size_t hub_commands__get_packed_size
                     (const HubCommands   *message);
size_t hub_commands__pack
                     (const HubCommands   *message,
                      uint8_t             *out);
size_t hub_commands__pack_to_buffer
                     (const HubCommands   *message,
                      ProtobufCBuffer     *buffer);
HubCommands *
       hub_commands__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hub_commands__free_unpacked
                     (HubCommands *message,
                      ProtobufCAllocator *allocator);
/* LocalData methods */
void   local_data__init
                     (LocalData         *message);
size_t local_data__get_packed_size
                     (const LocalData   *message);
size_t local_data__pack
                     (const LocalData   *message,
                      uint8_t             *out);
size_t local_data__pack_to_buffer
                     (const LocalData   *message,
                      ProtobufCBuffer     *buffer);
LocalData *
       local_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   local_data__free_unpacked
                     (LocalData *message,
                      ProtobufCAllocator *allocator);
/* ActionMatrix methods */
void   action_matrix__init
                     (ActionMatrix         *message);
size_t action_matrix__get_packed_size
                     (const ActionMatrix   *message);
size_t action_matrix__pack
                     (const ActionMatrix   *message,
                      uint8_t             *out);
size_t action_matrix__pack_to_buffer
                     (const ActionMatrix   *message,
                      ProtobufCBuffer     *buffer);
ActionMatrix *
       action_matrix__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   action_matrix__free_unpacked
                     (ActionMatrix *message,
                      ProtobufCAllocator *allocator);
/* DeviceConfig methods */
void   device_config__init
                     (DeviceConfig         *message);
size_t device_config__get_packed_size
                     (const DeviceConfig   *message);
size_t device_config__pack
                     (const DeviceConfig   *message,
                      uint8_t             *out);
size_t device_config__pack_to_buffer
                     (const DeviceConfig   *message,
                      ProtobufCBuffer     *buffer);
DeviceConfig *
       device_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_config__free_unpacked
                     (DeviceConfig *message,
                      ProtobufCAllocator *allocator);
/* AlgorithmConfig methods */
void   algorithm_config__init
                     (AlgorithmConfig         *message);
size_t algorithm_config__get_packed_size
                     (const AlgorithmConfig   *message);
size_t algorithm_config__pack
                     (const AlgorithmConfig   *message,
                      uint8_t             *out);
size_t algorithm_config__pack_to_buffer
                     (const AlgorithmConfig   *message,
                      ProtobufCBuffer     *buffer);
AlgorithmConfig *
       algorithm_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   algorithm_config__free_unpacked
                     (AlgorithmConfig *message,
                      ProtobufCAllocator *allocator);
/* DeviceStatus methods */
void   device_status__init
                     (DeviceStatus         *message);
size_t device_status__get_packed_size
                     (const DeviceStatus   *message);
size_t device_status__pack
                     (const DeviceStatus   *message,
                      uint8_t             *out);
size_t device_status__pack_to_buffer
                     (const DeviceStatus   *message,
                      ProtobufCBuffer     *buffer);
DeviceStatus *
       device_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_status__free_unpacked
                     (DeviceStatus *message,
                      ProtobufCAllocator *allocator);
/* GenericEvent methods */
void   generic_event__init
                     (GenericEvent         *message);
size_t generic_event__get_packed_size
                     (const GenericEvent   *message);
size_t generic_event__pack
                     (const GenericEvent   *message,
                      uint8_t             *out);
size_t generic_event__pack_to_buffer
                     (const GenericEvent   *message,
                      ProtobufCBuffer     *buffer);
GenericEvent *
       generic_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   generic_event__free_unpacked
                     (GenericEvent *message,
                      ProtobufCAllocator *allocator);
/* EventArray__EventArrayEntry methods */
void   event_array__event_array_entry__init
                     (EventArray__EventArrayEntry         *message);
/* EventArray methods */
void   event_array__init
                     (EventArray         *message);
size_t event_array__get_packed_size
                     (const EventArray   *message);
size_t event_array__pack
                     (const EventArray   *message,
                      uint8_t             *out);
size_t event_array__pack_to_buffer
                     (const EventArray   *message,
                      ProtobufCBuffer     *buffer);
EventArray *
       event_array__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event_array__free_unpacked
                     (EventArray *message,
                      ProtobufCAllocator *allocator);
/* Event0x01 methods */
void   event0x01__init
                     (Event0x01         *message);
size_t event0x01__get_packed_size
                     (const Event0x01   *message);
size_t event0x01__pack
                     (const Event0x01   *message,
                      uint8_t             *out);
size_t event0x01__pack_to_buffer
                     (const Event0x01   *message,
                      ProtobufCBuffer     *buffer);
Event0x01 *
       event0x01__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x01__free_unpacked
                     (Event0x01 *message,
                      ProtobufCAllocator *allocator);
/* Event0x02 methods */
void   event0x02__init
                     (Event0x02         *message);
size_t event0x02__get_packed_size
                     (const Event0x02   *message);
size_t event0x02__pack
                     (const Event0x02   *message,
                      uint8_t             *out);
size_t event0x02__pack_to_buffer
                     (const Event0x02   *message,
                      ProtobufCBuffer     *buffer);
Event0x02 *
       event0x02__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x02__free_unpacked
                     (Event0x02 *message,
                      ProtobufCAllocator *allocator);
/* Event0x04 methods */
void   event0x04__init
                     (Event0x04         *message);
size_t event0x04__get_packed_size
                     (const Event0x04   *message);
size_t event0x04__pack
                     (const Event0x04   *message,
                      uint8_t             *out);
size_t event0x04__pack_to_buffer
                     (const Event0x04   *message,
                      ProtobufCBuffer     *buffer);
Event0x04 *
       event0x04__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x04__free_unpacked
                     (Event0x04 *message,
                      ProtobufCAllocator *allocator);
/* Event0x05 methods */
void   event0x05__init
                     (Event0x05         *message);
size_t event0x05__get_packed_size
                     (const Event0x05   *message);
size_t event0x05__pack
                     (const Event0x05   *message,
                      uint8_t             *out);
size_t event0x05__pack_to_buffer
                     (const Event0x05   *message,
                      ProtobufCBuffer     *buffer);
Event0x05 *
       event0x05__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x05__free_unpacked
                     (Event0x05 *message,
                      ProtobufCAllocator *allocator);
/* Event0x06 methods */
void   event0x06__init
                     (Event0x06         *message);
size_t event0x06__get_packed_size
                     (const Event0x06   *message);
size_t event0x06__pack
                     (const Event0x06   *message,
                      uint8_t             *out);
size_t event0x06__pack_to_buffer
                     (const Event0x06   *message,
                      ProtobufCBuffer     *buffer);
Event0x06 *
       event0x06__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x06__free_unpacked
                     (Event0x06 *message,
                      ProtobufCAllocator *allocator);
/* Event0x07 methods */
void   event0x07__init
                     (Event0x07         *message);
size_t event0x07__get_packed_size
                     (const Event0x07   *message);
size_t event0x07__pack
                     (const Event0x07   *message,
                      uint8_t             *out);
size_t event0x07__pack_to_buffer
                     (const Event0x07   *message,
                      ProtobufCBuffer     *buffer);
Event0x07 *
       event0x07__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x07__free_unpacked
                     (Event0x07 *message,
                      ProtobufCAllocator *allocator);
/* Event0x09 methods */
void   event0x09__init
                     (Event0x09         *message);
size_t event0x09__get_packed_size
                     (const Event0x09   *message);
size_t event0x09__pack
                     (const Event0x09   *message,
                      uint8_t             *out);
size_t event0x09__pack_to_buffer
                     (const Event0x09   *message,
                      ProtobufCBuffer     *buffer);
Event0x09 *
       event0x09__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x09__free_unpacked
                     (Event0x09 *message,
                      ProtobufCAllocator *allocator);
/* Event0x0B methods */
void   event0x0_b__init
                     (Event0x0B         *message);
size_t event0x0_b__get_packed_size
                     (const Event0x0B   *message);
size_t event0x0_b__pack
                     (const Event0x0B   *message,
                      uint8_t             *out);
size_t event0x0_b__pack_to_buffer
                     (const Event0x0B   *message,
                      ProtobufCBuffer     *buffer);
Event0x0B *
       event0x0_b__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x0_b__free_unpacked
                     (Event0x0B *message,
                      ProtobufCAllocator *allocator);
/* Event0x0C methods */
void   event0x0_c__init
                     (Event0x0C         *message);
size_t event0x0_c__get_packed_size
                     (const Event0x0C   *message);
size_t event0x0_c__pack
                     (const Event0x0C   *message,
                      uint8_t             *out);
size_t event0x0_c__pack_to_buffer
                     (const Event0x0C   *message,
                      ProtobufCBuffer     *buffer);
Event0x0C *
       event0x0_c__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x0_c__free_unpacked
                     (Event0x0C *message,
                      ProtobufCAllocator *allocator);
/* Event0x0D methods */
void   event0x0_d__init
                     (Event0x0D         *message);
size_t event0x0_d__get_packed_size
                     (const Event0x0D   *message);
size_t event0x0_d__pack
                     (const Event0x0D   *message,
                      uint8_t             *out);
size_t event0x0_d__pack_to_buffer
                     (const Event0x0D   *message,
                      ProtobufCBuffer     *buffer);
Event0x0D *
       event0x0_d__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x0_d__free_unpacked
                     (Event0x0D *message,
                      ProtobufCAllocator *allocator);
/* Event0x0F methods */
void   event0x0_f__init
                     (Event0x0F         *message);
size_t event0x0_f__get_packed_size
                     (const Event0x0F   *message);
size_t event0x0_f__pack
                     (const Event0x0F   *message,
                      uint8_t             *out);
size_t event0x0_f__pack_to_buffer
                     (const Event0x0F   *message,
                      ProtobufCBuffer     *buffer);
Event0x0F *
       event0x0_f__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x0_f__free_unpacked
                     (Event0x0F *message,
                      ProtobufCAllocator *allocator);
/* Event0x10 methods */
void   event0x10__init
                     (Event0x10         *message);
size_t event0x10__get_packed_size
                     (const Event0x10   *message);
size_t event0x10__pack
                     (const Event0x10   *message,
                      uint8_t             *out);
size_t event0x10__pack_to_buffer
                     (const Event0x10   *message,
                      ProtobufCBuffer     *buffer);
Event0x10 *
       event0x10__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x10__free_unpacked
                     (Event0x10 *message,
                      ProtobufCAllocator *allocator);
/* Event0x11 methods */
void   event0x11__init
                     (Event0x11         *message);
size_t event0x11__get_packed_size
                     (const Event0x11   *message);
size_t event0x11__pack
                     (const Event0x11   *message,
                      uint8_t             *out);
size_t event0x11__pack_to_buffer
                     (const Event0x11   *message,
                      ProtobufCBuffer     *buffer);
Event0x11 *
       event0x11__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x11__free_unpacked
                     (Event0x11 *message,
                      ProtobufCAllocator *allocator);
/* Event0x12 methods */
void   event0x12__init
                     (Event0x12         *message);
size_t event0x12__get_packed_size
                     (const Event0x12   *message);
size_t event0x12__pack
                     (const Event0x12   *message,
                      uint8_t             *out);
size_t event0x12__pack_to_buffer
                     (const Event0x12   *message,
                      ProtobufCBuffer     *buffer);
Event0x12 *
       event0x12__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x12__free_unpacked
                     (Event0x12 *message,
                      ProtobufCAllocator *allocator);
/* Event0x13 methods */
void   event0x13__init
                     (Event0x13         *message);
size_t event0x13__get_packed_size
                     (const Event0x13   *message);
size_t event0x13__pack
                     (const Event0x13   *message,
                      uint8_t             *out);
size_t event0x13__pack_to_buffer
                     (const Event0x13   *message,
                      ProtobufCBuffer     *buffer);
Event0x13 *
       event0x13__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x13__free_unpacked
                     (Event0x13 *message,
                      ProtobufCAllocator *allocator);
/* Event0x17 methods */
void   event0x17__init
                     (Event0x17         *message);
size_t event0x17__get_packed_size
                     (const Event0x17   *message);
size_t event0x17__pack
                     (const Event0x17   *message,
                      uint8_t             *out);
size_t event0x17__pack_to_buffer
                     (const Event0x17   *message,
                      ProtobufCBuffer     *buffer);
Event0x17 *
       event0x17__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x17__free_unpacked
                     (Event0x17 *message,
                      ProtobufCAllocator *allocator);
/* Event0x18 methods */
void   event0x18__init
                     (Event0x18         *message);
size_t event0x18__get_packed_size
                     (const Event0x18   *message);
size_t event0x18__pack
                     (const Event0x18   *message,
                      uint8_t             *out);
size_t event0x18__pack_to_buffer
                     (const Event0x18   *message,
                      ProtobufCBuffer     *buffer);
Event0x18 *
       event0x18__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x18__free_unpacked
                     (Event0x18 *message,
                      ProtobufCAllocator *allocator);
/* Event0x19 methods */
void   event0x19__init
                     (Event0x19         *message);
size_t event0x19__get_packed_size
                     (const Event0x19   *message);
size_t event0x19__pack
                     (const Event0x19   *message,
                      uint8_t             *out);
size_t event0x19__pack_to_buffer
                     (const Event0x19   *message,
                      ProtobufCBuffer     *buffer);
Event0x19 *
       event0x19__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x19__free_unpacked
                     (Event0x19 *message,
                      ProtobufCAllocator *allocator);
/* Event0x1A methods */
void   event0x1_a__init
                     (Event0x1A         *message);
size_t event0x1_a__get_packed_size
                     (const Event0x1A   *message);
size_t event0x1_a__pack
                     (const Event0x1A   *message,
                      uint8_t             *out);
size_t event0x1_a__pack_to_buffer
                     (const Event0x1A   *message,
                      ProtobufCBuffer     *buffer);
Event0x1A *
       event0x1_a__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x1_a__free_unpacked
                     (Event0x1A *message,
                      ProtobufCAllocator *allocator);
/* Event0x1B methods */
void   event0x1_b__init
                     (Event0x1B         *message);
size_t event0x1_b__get_packed_size
                     (const Event0x1B   *message);
size_t event0x1_b__pack
                     (const Event0x1B   *message,
                      uint8_t             *out);
size_t event0x1_b__pack_to_buffer
                     (const Event0x1B   *message,
                      ProtobufCBuffer     *buffer);
Event0x1B *
       event0x1_b__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x1_b__free_unpacked
                     (Event0x1B *message,
                      ProtobufCAllocator *allocator);
/* Event0x1C methods */
void   event0x1_c__init
                     (Event0x1C         *message);
size_t event0x1_c__get_packed_size
                     (const Event0x1C   *message);
size_t event0x1_c__pack
                     (const Event0x1C   *message,
                      uint8_t             *out);
size_t event0x1_c__pack_to_buffer
                     (const Event0x1C   *message,
                      ProtobufCBuffer     *buffer);
Event0x1C *
       event0x1_c__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x1_c__free_unpacked
                     (Event0x1C *message,
                      ProtobufCAllocator *allocator);
/* Event0xFF methods */
void   event0x_ff__init
                     (Event0xFF         *message);
size_t event0x_ff__get_packed_size
                     (const Event0xFF   *message);
size_t event0x_ff__pack
                     (const Event0xFF   *message,
                      uint8_t             *out);
size_t event0x_ff__pack_to_buffer
                     (const Event0xFF   *message,
                      ProtobufCBuffer     *buffer);
Event0xFF *
       event0x_ff__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x_ff__free_unpacked
                     (Event0xFF *message,
                      ProtobufCAllocator *allocator);
/* Event0x08 methods */
void   event0x08__init
                     (Event0x08         *message);
size_t event0x08__get_packed_size
                     (const Event0x08   *message);
size_t event0x08__pack
                     (const Event0x08   *message,
                      uint8_t             *out);
size_t event0x08__pack_to_buffer
                     (const Event0x08   *message,
                      ProtobufCBuffer     *buffer);
Event0x08 *
       event0x08__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event0x08__free_unpacked
                     (Event0x08 *message,
                      ProtobufCAllocator *allocator);
/* HubNotifications methods */
void   hub_notifications__init
                     (HubNotifications         *message);
size_t hub_notifications__get_packed_size
                     (const HubNotifications   *message);
size_t hub_notifications__pack
                     (const HubNotifications   *message,
                      uint8_t             *out);
size_t hub_notifications__pack_to_buffer
                     (const HubNotifications   *message,
                      ProtobufCBuffer     *buffer);
HubNotifications *
       hub_notifications__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hub_notifications__free_unpacked
                     (HubNotifications *message,
                      ProtobufCAllocator *allocator);
/* UsageUpdate methods */
void   usage_update__init
                     (UsageUpdate         *message);
size_t usage_update__get_packed_size
                     (const UsageUpdate   *message);
size_t usage_update__pack
                     (const UsageUpdate   *message,
                      uint8_t             *out);
size_t usage_update__pack_to_buffer
                     (const UsageUpdate   *message,
                      ProtobufCBuffer     *buffer);
UsageUpdate *
       usage_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   usage_update__free_unpacked
                     (UsageUpdate *message,
                      ProtobufCAllocator *allocator);
/* HubUpdate methods */
void   hub_update__init
                     (HubUpdate         *message);
size_t hub_update__get_packed_size
                     (const HubUpdate   *message);
size_t hub_update__pack
                     (const HubUpdate   *message,
                      uint8_t             *out);
size_t hub_update__pack_to_buffer
                     (const HubUpdate   *message,
                      ProtobufCBuffer     *buffer);
HubUpdate *
       hub_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   hub_update__free_unpacked
                     (HubUpdate *message,
                      ProtobufCAllocator *allocator);
/* DataUpdate methods */
void   data_update__init
                     (DataUpdate         *message);
size_t data_update__get_packed_size
                     (const DataUpdate   *message);
size_t data_update__pack
                     (const DataUpdate   *message,
                      uint8_t             *out);
size_t data_update__pack_to_buffer
                     (const DataUpdate   *message,
                      ProtobufCBuffer     *buffer);
DataUpdate *
       data_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   data_update__free_unpacked
                     (DataUpdate *message,
                      ProtobufCAllocator *allocator);
/* RequestHub methods */
void   request_hub__init
                     (RequestHub         *message);
size_t request_hub__get_packed_size
                     (const RequestHub   *message);
size_t request_hub__pack
                     (const RequestHub   *message,
                      uint8_t             *out);
size_t request_hub__pack_to_buffer
                     (const RequestHub   *message,
                      ProtobufCBuffer     *buffer);
RequestHub *
       request_hub__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request_hub__free_unpacked
                     (RequestHub *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*PackageDevice2Hub_Closure)
                 (const PackageDevice2Hub *message,
                  void *closure_data);
typedef void (*PackageHub2Device_Closure)
                 (const PackageHub2Device *message,
                  void *closure_data);
typedef void (*HubCommands_Closure)
                 (const HubCommands *message,
                  void *closure_data);
typedef void (*LocalData_Closure)
                 (const LocalData *message,
                  void *closure_data);
typedef void (*ActionMatrix_Closure)
                 (const ActionMatrix *message,
                  void *closure_data);
typedef void (*DeviceConfig_Closure)
                 (const DeviceConfig *message,
                  void *closure_data);
typedef void (*AlgorithmConfig_Closure)
                 (const AlgorithmConfig *message,
                  void *closure_data);
typedef void (*DeviceStatus_Closure)
                 (const DeviceStatus *message,
                  void *closure_data);
typedef void (*GenericEvent_Closure)
                 (const GenericEvent *message,
                  void *closure_data);
typedef void (*EventArray__EventArrayEntry_Closure)
                 (const EventArray__EventArrayEntry *message,
                  void *closure_data);
typedef void (*EventArray_Closure)
                 (const EventArray *message,
                  void *closure_data);
typedef void (*Event0x01_Closure)
                 (const Event0x01 *message,
                  void *closure_data);
typedef void (*Event0x02_Closure)
                 (const Event0x02 *message,
                  void *closure_data);
typedef void (*Event0x04_Closure)
                 (const Event0x04 *message,
                  void *closure_data);
typedef void (*Event0x05_Closure)
                 (const Event0x05 *message,
                  void *closure_data);
typedef void (*Event0x06_Closure)
                 (const Event0x06 *message,
                  void *closure_data);
typedef void (*Event0x07_Closure)
                 (const Event0x07 *message,
                  void *closure_data);
typedef void (*Event0x09_Closure)
                 (const Event0x09 *message,
                  void *closure_data);
typedef void (*Event0x0B_Closure)
                 (const Event0x0B *message,
                  void *closure_data);
typedef void (*Event0x0C_Closure)
                 (const Event0x0C *message,
                  void *closure_data);
typedef void (*Event0x0D_Closure)
                 (const Event0x0D *message,
                  void *closure_data);
typedef void (*Event0x0F_Closure)
                 (const Event0x0F *message,
                  void *closure_data);
typedef void (*Event0x10_Closure)
                 (const Event0x10 *message,
                  void *closure_data);
typedef void (*Event0x11_Closure)
                 (const Event0x11 *message,
                  void *closure_data);
typedef void (*Event0x12_Closure)
                 (const Event0x12 *message,
                  void *closure_data);
typedef void (*Event0x13_Closure)
                 (const Event0x13 *message,
                  void *closure_data);
typedef void (*Event0x17_Closure)
                 (const Event0x17 *message,
                  void *closure_data);
typedef void (*Event0x18_Closure)
                 (const Event0x18 *message,
                  void *closure_data);
typedef void (*Event0x19_Closure)
                 (const Event0x19 *message,
                  void *closure_data);
typedef void (*Event0x1A_Closure)
                 (const Event0x1A *message,
                  void *closure_data);
typedef void (*Event0x1B_Closure)
                 (const Event0x1B *message,
                  void *closure_data);
typedef void (*Event0x1C_Closure)
                 (const Event0x1C *message,
                  void *closure_data);
typedef void (*Event0xFF_Closure)
                 (const Event0xFF *message,
                  void *closure_data);
typedef void (*Event0x08_Closure)
                 (const Event0x08 *message,
                  void *closure_data);
typedef void (*HubNotifications_Closure)
                 (const HubNotifications *message,
                  void *closure_data);
typedef void (*UsageUpdate_Closure)
                 (const UsageUpdate *message,
                  void *closure_data);
typedef void (*HubUpdate_Closure)
                 (const HubUpdate *message,
                  void *closure_data);
typedef void (*DataUpdate_Closure)
                 (const DataUpdate *message,
                  void *closure_data);
typedef void (*RequestHub_Closure)
                 (const RequestHub *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor package_device2_hub__descriptor;
extern const ProtobufCMessageDescriptor package_hub2_device__descriptor;
extern const ProtobufCMessageDescriptor hub_commands__descriptor;
extern const ProtobufCMessageDescriptor local_data__descriptor;
extern const ProtobufCMessageDescriptor action_matrix__descriptor;
extern const ProtobufCMessageDescriptor device_config__descriptor;
extern const ProtobufCMessageDescriptor algorithm_config__descriptor;
extern const ProtobufCMessageDescriptor device_status__descriptor;
extern const ProtobufCMessageDescriptor generic_event__descriptor;
extern const ProtobufCMessageDescriptor event_array__descriptor;
extern const ProtobufCMessageDescriptor event_array__event_array_entry__descriptor;
extern const ProtobufCMessageDescriptor event0x01__descriptor;
extern const ProtobufCMessageDescriptor event0x02__descriptor;
extern const ProtobufCMessageDescriptor event0x04__descriptor;
extern const ProtobufCMessageDescriptor event0x05__descriptor;
extern const ProtobufCMessageDescriptor event0x06__descriptor;
extern const ProtobufCMessageDescriptor event0x07__descriptor;
extern const ProtobufCMessageDescriptor event0x09__descriptor;
extern const ProtobufCMessageDescriptor event0x0_b__descriptor;
extern const ProtobufCMessageDescriptor event0x0_c__descriptor;
extern const ProtobufCMessageDescriptor event0x0_d__descriptor;
extern const ProtobufCMessageDescriptor event0x0_f__descriptor;
extern const ProtobufCMessageDescriptor event0x10__descriptor;
extern const ProtobufCMessageDescriptor event0x11__descriptor;
extern const ProtobufCMessageDescriptor event0x12__descriptor;
extern const ProtobufCMessageDescriptor event0x13__descriptor;
extern const ProtobufCMessageDescriptor event0x17__descriptor;
extern const ProtobufCMessageDescriptor event0x18__descriptor;
extern const ProtobufCMessageDescriptor event0x19__descriptor;
extern const ProtobufCMessageDescriptor event0x1_a__descriptor;
extern const ProtobufCMessageDescriptor event0x1_b__descriptor;
extern const ProtobufCMessageDescriptor event0x1_c__descriptor;
extern const ProtobufCMessageDescriptor event0x_ff__descriptor;
extern const ProtobufCMessageDescriptor event0x08__descriptor;
extern const ProtobufCMessageDescriptor hub_notifications__descriptor;
extern const ProtobufCMessageDescriptor usage_update__descriptor;
extern const ProtobufCMessageDescriptor hub_update__descriptor;
extern const ProtobufCMessageDescriptor data_update__descriptor;
extern const ProtobufCMessageDescriptor request_hub__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_aletheia_2eproto__INCLUDED */
